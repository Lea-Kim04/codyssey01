Analysis - Design - Code - Test

> 문제상황:
1. 화성 기지의 남은 센서들을 사용해서 환경 값을 읽어 들이고 출력하는 기능을 추가.
2. 실제 센서를 만들기 전에 더미 센서(dummy sensor) 부터 만들어서 테스트를 시작해야 했다.

> 조건
더미 센서에 해당하는 클래스를 생성한다. 클래스의 이름은 DummySensor로 정의한다.
DummySensor의 멤버로 env_values라는 사전 객체를 추가한다. 사전 객체에는 다음과 같은 항목들이 추가 되어 있어야 한다.
화성 기지 내부 온도 (mars_base_internal_temperature), 화성 기지 외부 온도 (mars_base_external_temperature)
화성 기지 내부 습도 (mars_base_internal_humidity), 회성 기지 외부 광량 (mars_base_external_illuminance)
화성 기지 내부 이산화탄소 농도 (mars_base_internal_co2), 화성 기지 내부 산소 농도 (mars_base_internal_oxygen)
DummySensor는 테스트를 위한 객체이므로 데이터를 랜덤으로 생성한다.
DummySensor 클래스에 set_env() 메소드를 추가한다. set_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env_values 항목에 채워주는 역할을 한다. 
각 항목의 값의 범위는 다음과 같다.
화성 기지 내부 온도 (18~30도), 화성 기지 외부 온도 (0~21도)
화성 기지 내부 습도 (50~60%), 화성 기지 외부 광량 (500~715 W/m2)
화성 기지 내부 이산화탄소 농도 (0.02~0.1%), 화성 기지 내부 산소 농도 (4%~7%)
DummySensor 클래스는 get_env() 메소드를 추가하는데 get_env() 메소드는 env_values를 return 한다.
DummySensor 클래스를 ds라는 이름으로 인스턴스(Instance)로 만든다.
인스턴스화 한 DummySensor 클래스에서 set_env()와 get_env()를 차례로 호출해서 값을 확인한다.
전체 코드를 mars_mission_computer.py 파일로 저장한다.

> 제약사항
Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
단 random을 다루는 라이브러리는 사용 가능하다.
Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
경고 메시지 없이 모든 코드는 실행 되어야 한다.

>
출력하는 내용을 날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 
와 같이 파일에 log를 남기는 부분을 get_env()에 추가 한다.


[작업 순서]
# 1. create Dummy class
    name = DummySensor
# 2. DummySensor_for_test add env_values
env_values = {}
<dict.lsit> 
화성 기지 내부 온도 (mars_base_internal_temperature)
화성 기지 외부 온도 (mars_base_external_temperature)
화성 기지 내부 습도 (mars_base_internal_humidity)
회성 기지 외부 광량 (mars_base_external_illuminance)
화성 기지 내부 이산화탄소 농도 (mars_base_internal_co2)
화성 기지 내부 산소 농도 (mars_base_internal_oxygen)
# 3. DummySensor_for_test creates data randomly 
# 4. Adds the method set_env() in the DummySensor_class
*set_env() method : Create the values between the certain random range, and fill the env_values with the values
<env_values.dict> {key ; value}
mars_base_internal_temperature : (18~30도)
mars_base_external_temperature : (0~21도)
mars_base_internal_humidity : (50~60%)
mars_base_external_illuminance : (500~715 W/m2)
mars_base_internal_co2 : (0.02~0.1%)
mars_base_internal_oxygen (4%~7%)
# 5. DummySensor_class add method get_env(return(env_values))
>> def __init__
>> def set_env
>> def get_env(return(env_values))
# 6. Create the Instance as ds_name by DummySensor_class
# 7. Load the set_env() and get_env() one by one, and Check the values in the ds_Dummysensor_class
# 8. Save the code by 'mars_mission_computer.py'
----------
# 9. Use the get_env() to print and save info_environment to a log file.
The logged info_environment should include: 
날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 

import datetime
env_log = f(info_environment:{value(env_values)})
f.write
print

>
*Error messages are not allowed. : try - except
*Only external libraries that handle random operations are allowed. 